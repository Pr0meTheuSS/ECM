McLorenExp(double, int):
        push    {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr} ; пуш данных на стек

        subs    r5, r2, #0 ; проверка условий продолжения цикла 
        ble     .L4 ; переход за тело цикла for 
        mov     r10, r0 ; 
        mov     fp, r1 ;
        mov     r4, #0 ; 
        mov     r6, #0 ; 
        ldr     r7, .L7 ; element = 1.0 
        mov     r8, #0 ;result = 0.0
        mov     r9, #0
.L3:
        ; result += element

        mov     r2, r6
        mov     r3, r7
        mov     r0, r8
        mov     r1, r9
        bl      __aeabi_dadd
        mov     r8, r0
        mov     r9, r1
        ;

        mov     r2, r6 ; 
        mov     r3, r7 ; 
        mov     r0, r10 ;
        mov     r1, fp ; 
        bl      __aeabi_dmul ; x * element
        mov     r6, r0
        mov     r7, r1
        add     r4, r4, #1 ; инкремент счётчика цикла 
        mov     r0, r4
        bl      __aeabi_i2d ; приведение к типу double
        mov     r2, r0
        mov     r3, r1
        mov     r0, r6
        mov     r1, r7
        bl      __aeabi_ddiv ; деление x * element / (double)(i + 1)
        mov     r6, r0
        mov     r7, r1

        cmp     r4, r5
        bne     .L3     ; переход по метке .L3 если r4 != r5

.L1:
        mov     r0, r8 ; данные для возврата 
        mov     r1, r9
        pop     {r3, r4, r5, r6, r7, r8, r9, r10, fp, pc} ; вытягиваем сос тека данные, восстанавливаем fp
.L4:
        mov     r8, #0
        mov     r9, #0
        b       .L1
.L7:
        .word   1072693248
main:
        push    {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr} ; пуш данных на стек
        ldr     r0, .L15 ; аргумент для malloc -. r0
        bl      malloc ; oвызов маллок
        mov     r7, r0
        mov     r5, r0
        mov     r6, r0
        mov     r4, #0
        mov     r8, #0
        ldr     r9, .L15+4 ; подгружаем в регистры константы
        mov     fp, #1000
        ldr     r10, .L15+8 ; подгружаем в регистры константы
.L10:
        mov     r0, r4
        bl      __aeabi_i2d ; приведение типа к double 
        mov     r2, r0
        mov     r3, r1
        mov     r0, r8
        mov     r1, r9
        bl      __aeabi_ddiv ; деление (1.0 / (double) i )
        mov     r2, fp
        bl      McLorenExp(double, int) ; вызов функции McLorenExp
        stm     r6!, {r0-r1} 
        add     r4, r4, #1 ; инкремент 
        cmp     r4, r10 ; проверка условия выхода из цикла 
        bne     .L10
        ldr     r1, .L15+12 ; подгружаем константы для вызова функции fopen
        ldr     r0, .L15+16 ; 
        bl      fopen ; вызов функции fopen
        mov     r6, r0
        add     r4, r7, #51118080 ;чудеса машинной оптимизации - непонятные константы =) 
        add     r4, r4, #81920    ; вроде как r4 = r7 + 51118080 + 81920 + r7 + 51118080
        ldr     r8, .L15+20
.L11:
        ldmia   r5!, {r2-r3}
        mov     r1, r8
        mov     r0, r6
        bl      fprintf
        cmp     r5, r4
        bne     .L11
        mov     r0, r7
        bl      free
        mov     r0, r6
        bl      fclose
        mov     r0, #0
        pop     {r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
.L15:
        .word   51200000
        .word   1072693248
        .word   6400000
        .word   .LC0
        .word   .LC1
        .word   .LC2
.LC0:
        .ascii  "wb\000"
.LC1:
        .ascii  "out.txt\000"
.LC2:
        .ascii  "%lf\000"