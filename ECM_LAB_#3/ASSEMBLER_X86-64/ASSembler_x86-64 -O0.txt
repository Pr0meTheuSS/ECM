McLorenExp(double, int):
        push    rbp                     ;запись rbp на стек
        mov     rbp, rsp		;перемещение rbp -> rsp
        movsd   QWORD PTR [rbp-40], xmm0;запись аргументов на стек
        mov     DWORD PTR [rbp-44], edi ;запись аргументов на стек
        pxor    xmm0, xmm0		;обнуление переменной через xor
        movsd   QWORD PTR [rbp-8], xmm0	;
        movsd   xmm0, QWORD PTR .LC1[rip];
         movsd   QWORD PTR [rbp-16], xmm0;
        mov     DWORD PTR [rbp-20], 0	;обнуление счетчика i
.L3:					
        mov     eax, DWORD PTR [rbp-20];перемещение значения счетчика i в регистр eax
        cmp     eax, DWORD PTR [rbp-44] ;сравнение eax и второго аргумента функции 
        jge     .L2			;условный переход
        movsd   xmm0, QWORD PTR [rbp-8]	;помещаем значение переменной по адресу [rbp-8](переменная result) в регистр xmm0
        addsd   xmm0, QWORD PTR [rbp-16];xmm0 = xmm0 + значение переменной по адресу [rbp-16](переменная element)
        movsd   QWORD PTR [rbp-8], xmm0	;результат сложения на прошлом шаге из xmm0 перемещаем в [rbp-8](переменная result)
        movsd   xmm0, QWORD PTR [rbp-16];в регистр xmm0 перемещаем значение переменной по адресу [rbp-16](переменная element)
        mulsd   xmm0, QWORD PTR [rbp-40];перемножение (xmm0 ~ переменная element) и QWORD PTR[rbp - 40] ~ первый аргумент функции (x)
        mov     eax, DWORD PTR [rbp-20]	;перемещение DWORD PTR [rbp-20] ~ счетчик цикла i  в регистр eax
        add     eax, 1			;инкремент  eax
        pxor    xmm1, xmm1		;обнуление переменной через xor
        cvtsi2sd        xmm1, eax	;приведение типов операндов
        divsd   xmm0, xmm1		;деление вещественных операндов
        movsd   QWORD PTR [rbp-16], xmm0;перемещение результата деления в переменную element
        add     DWORD PTR [rbp-20], 1	;инкремент счетчика цикла i
        jmp     .L3			;безусловный переход к началу цикла по метке .L3
.L2:
        movsd   xmm0, QWORD PTR [rbp-8]	;перемещение значение переменной result
        movq    rax, xmm0		;в регистр rax
        movq    xmm0, rax		;
        pop     rbp			;взятие адреса со стека 
        ret				;возврат управления вызвавшей функции 



.LC2:
        .string "wb"
.LC3:
        .string "out.txt"
.LC4:
        .string "%lf"
main:                      				;
        push    rbp					;запись rbp на стек
        mov     rbp, rsp				;копирование из rsp в rbp
        push    rbx					;запись rbx на стек
        sub     rsp, 40					;вычитание из rsp 40
        mov     edi, 51200000				;копирование в edi 5120000
        call    malloc					;вызов функции маллок 
        mov     QWORD PTR [rbp-32], rax			;перемещение в переменную arr результата работы функции malloc, помещённый в rax
        mov     DWORD PTR [rbp-20], 0			;обнуление счетчика цикла
.L7:						
        cmp     DWORD PTR [rbp-20], 6399999		;сравнение счетчика цикла в for()
        jg      .L6					;переход по метке, если больше
        pxor    xmm1, xmm1				;обнуление xmm1 xor-ом
        cvtsi2sd        xmm1, DWORD PTR [rbp-20]	;приведение типов
        movsd   xmm0, QWORD PTR .LC1[rip]		;помещение в xmm0константы 1.0
        divsd   xmm0, xmm1				;деление константы 1.0 на приведённый к double счетчик цикла
        movq    rax, xmm0				;результат деления -> rax 
        mov     edx, DWORD PTR [rbp-20]			;значение указателя счетчика -> edx
        movsx   rdx, edx				;edx->rdx
        lea     rcx, [0+rdx*8]				;смещение от начала массива arr -> rcx
        mov     rdx, QWORD PTR [rbp-32]			;значение переменной arr -> rdx
        lea     rbx, [rcx+rdx]				;сумма адреса начала массива arr и смещения, посчитанного и помещенного в rcx
        mov     edi, 1000				;копирование 1000 -> edi(второй аргумент функции McLorenExp) 
        movq    xmm0, rax				;
        call    McLorenExp(double, int)			;вызов функции McLorenExp
        movq    rax, xmm0				;результат функции McLorenExp -> rax 
        mov     QWORD PTR [rbx], rax			;rax -> высчитанное место в массиве arr
        add     DWORD PTR [rbp-20], 1			;инкремент счетчика цикла
        jmp     .L7					;безусловный переход к начаул цикла
.L6:				
        mov     esi, OFFSET FLAT:.LC2			;помещение в esi и edi стрковых констант 
        mov     edi, OFFSET FLAT:.LC3			;аргументы функции fopen
        call    fopen					;вызов функции fopen
        mov     QWORD PTR [rbp-40], rax			;результат функции fopen() из rax -> переменную out на стеке 
        mov     DWORD PTR [rbp-24], 0			;
.L9:		
        cmp     DWORD PTR [rbp-24], 6399999		;сравнение 
        jg      .L8					;условный переход(если больше, то перейти по метке .L8)
        mov     eax, DWORD PTR [rbp-24]			;
        cdqe						;какая-то магия (что-то вроде удвоения размерности знаковой части)
        lea     rdx, [0+rax*8]				;расчет смещения относительно начала массива arr
        mov     rax, QWORD PTR [rbp-32]			;значение arr -> rax
        add     rax, rdx				;прибавление к rax(содержит arr) смещения в соответствии со значением счетчика цикла 
        mov     rdx, QWORD PTR [rax]			;
        mov     rax, QWORD PTR [rbp-40]			;указатель на дескриптор файла(out) -> rax
        movq    xmm0, rdx				;
        mov     esi, OFFSET FLAT:.LC4			;помещение в esi аргумента функции fprintf 
        mov     rdi, rax				;помещение в rdi аргумента функции fprintf 
        mov     eax, 1					;
        call    fprintf					;вызов функции fprintf
        add     DWORD PTR [rbp-24], 1			;инкремент счетчика цикла
        jmp     .L9					;безусловный переход к началу цикла 		
.L8:
        mov     rax, QWORD PTR [rbp-32]			;помещаем arr -> rax
        mov     rdi, rax				;из rax -> rdi для передачи в качестве аргумента функции free
        call    free					;вызов функции free
        mov     rax, QWORD PTR [rbp-40]			;аналогично помещение 
        mov     rdi, rax				;указателя на дескриптор файла в rdi для передачи в качестве аргумента 
        call    fclose					;вызов функции fclose
        mov     eax, 0					;return 0
        mov     rbx, QWORD PTR [rbp-8]			;выглядит как восстановления состояния регистра rbx 
        leave						;восстановление состояния стека до вызова функции main
        ret						;передача управления вызвавшему процессу
.LC1:
        .long   0
        .long   1072693248